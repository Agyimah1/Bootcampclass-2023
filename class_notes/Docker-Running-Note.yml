Docker 
======
7 years Experience in IT and DevOps:
How applications were deployed in the past and today:
1.  1990S --- 10 years 
2.  2000S ---   
3.  TODAY  

 1) Traditional/Physical Deployment
 2) Virtualized Deployment (Hardware level Isolation) 
 3) Containerized Deployment(OS/Process level Isolation)

====================================
Docker -- Is a containerization software use to create, build and 
          deploy applications as containers
            Build applications  
            ship applications  
            deploy applications  

IQ: How many environment are you supporting in your CURRENT role??
         Development environment    
         Testing/QA environment    
         Production environment 
In docker applications run as containers   

Containers --> contains everything required for an application to run create
               (App Files (code), Dependencies 
              (Softwares +Libraries), ENV vars & Other Configuration files) 
              which is required for a piece of application/process to run.
          app.war   -----> Virtual Machine  
                           java and Tomcat installed and configured  

   app code     = app.war + 
   dependencies = openjdk11+ + tomcat9  

   app code     = app.ear + 
   dependencies = openjdk11+ + jboss/wildFly  

   app code     = app.jar + 
   dependencies = java

Containerization Software/Runtime --> :
  Docker, = over 80% usage  
  Rocket, 
  Pod man, 
  CRI-O, 
  Core-OS,
  Container-D. 

Docker:  
  Is a containerization multi-platform software use to;    
  create, build, ship, share and deploy containerize applications  

O.S --> Cross Platform (Docker can be installed in any O.S)
        Docker Can Be Installed on Linux, Windows OS, macOS  
        Desktops as well as servers.

Docker is available in 2 Editions:

 1) Docker CE: --> Community Edition (Free to use)
 2) Docker EE: --> Enterprise Edition (Commercial/Licensed)
     CE+
     ---
      1) Vendor Support = docker.io 
      2) Additional Features like DTR (Docker Trusted Registry),
      3) UCP (Universal Control Plane) GUI.

Docker is developed in Go Lang/Go Language. 

Docker Desktop (Local Laptops/Desktops) --> 
https://docs.docker.com/engine/install/#desktop
  Developers/DevOps Engineers Systems

Linux Flavors :
 CentOS
 Amazon Linux
 Red Hat   :
 Ubuntu
 Debian
 Fedora
 SUSE Linux â€¦etc.
 
Officially, Docker CE is not supported for Red Hat. 

app1:
    appCode      = app.war  +   
    Dependencies = openjdk11+ + tomcat9

app1:
    appCode      = app.ear  +   
    Dependencies = openjdk11 + JBoss/WildFly

app3: python app 
    appCode      = app  +   
    Dependencies = python

app3: nodeJS app 
    appCode      = app  +   
    Dependencies = npm 

create, build, ship, share and deploy:
Ticket001: Create a Dockerfile to containerize a javabased web application
SCM-GitHub/GitLab/BitBucket -- projectRepo[src/pom.xml/Dockerfile/Jenkinsfile]


Install Docker on  Ubuntu
###########################
#!/bin/bash
sudo apt update -y
sudo apt install docker.io -y
sudo service docker start
sudo docker info
sudo hostnamectl set-hostname docker 
sudo usermod -aG docker ubuntu
sudo su - ubuntu    
 
# Amazon Linux
###########################
sudo yum update -y    
sudo yum install docker -y
sudo service docker start
sudo usermod -aG docker ec2-user
sudo su - ec2-user


Add Regular user to docker group
sudo usermod -aG docker  <username>

ex:
sudo usermod -aG docker ec2-user

docker pull tomcat

docker pull sonarqube

docker pull jenkins/jenkins



install maven and git:
    sudo apt install git maven -y

Automated:
  sudo apt install maven -y  
manual: 
  download the maven software
   and extract it 
   and add to the PATH 

clone project from git:
    git clone repor Url 
     

Build with Maven:

mvn clean package
target/core.war   

THD = /usr/local/tomcat/ 
THD = /opt/tomcat9  

Dockerfile: --> Dockerfile is a file which contains instructions 
                needed to create a docker image. 
   Dockerfile contains Specific Keywords use to build images by   
   the Docker Daemon

Create Dockerfile:
    vi Dockerfile 
    
      FROM tomcat:8.0.20-jre8
      -# [FROM defines the baseImage containing dependencies]
      COPY target/core.war /usr/local/tomcat/webapps/core.war

https://github.com/unitedcoresystems/maven-web-application.git
  

Docker Image: --> It's a package which contains
                 everything (Libraries, Softwares+ENV+Application Code)
                 needed to run your application.

                Creating a docker image:
              ==========================

              Docker build -t name:tag .
                  - docker build -t image:tag  . 
                  docker build -t unitedwebapp:v1 .


             Docker build -t Unitedwebapp:v1
                  - create  the repo images on dockerhub
                    - copy repo docker file
                  

                  - Authenticate Server with dockerhub
                      - $ docker login
                        Enter username & password

Results: Login Succeeded
ubuntu@docker:~/maven-web-application$


docker push tiffy2009/unitedwebapp1:v1


docker tag unitedwebapp1:v1 tiffy2009/unitedwebapp1:v1
docker push tiffy2009/unitedwebapp1:v1


docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname

        Create a tag for the image:   
                      - docker tag united:latest tiffy2009/united


Docker containers: Run time instance of a docker image. 
     
     If you execute: docker run, a container is created from the image 



Run the Container:


        docker run --name united -d -p 300:8080 united:latest 
                docker run --name -d -p 70:8080 image1
                docker run --name -d -p 70:8080 image1:v1 
                docker run --name -d -p 70:8080 image1:v6 

                docker run --name containerName -d -p hostPort:containerPort image:tag 
                  -d = detachable mode  
                  -p = port Forwarding 

Docker Commands:
====================
    - docker ps 
      You will get permission denied error as a regular user 
      doesn't have permissions to execute docker commands. 

      Add  the regular user to the docker group.

            sudo usermod -aG docker ubuntu
            sudo su - ubuntu   


-# Exit From Current SSH Terminal & SSH(Login) again . Then execute 
docker ps 


Push repo to Dockerhub:
      - docker push tiffy2009/united


ubuntu@docker:~/maven-web-application$ cat Dockerfile 
Dockerfile
FROM tomcat:8.0.20-jre8
COPY target/*.war /usr/local/tomcat/webapps/tesla.war

 docker build   
 docker run 

Docker Registry:
1. DockerHub public [80% usage]
2. DTR 
3. AmazonECR 
4. Nexus/
5. JFrog


Docker images :
Docker containers  
Dockerfile 
Docker Networks 
Docker volumes  
Docker compose  
Docker swarm 



Deploy a java web application using docker: 
    1. use/Create/modify a Dockerfile   
    2. Use the Dockerfile to build a docker image  
    3. Push the image to an image registry[dockerhub/ecr/nexus/JFrog]
    4. pull, inspect and scan the docker image
    5. deploy the application using the image


RUN instructions will be executed while creating a image. 
CMD Instructions will be executed while creating a container.
We can have more than one RUN keyword in a docker file.
All the RUN keywords will be processed while creating an image in the defined order(top to bottom).
